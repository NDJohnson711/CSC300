#include "LinkedList.hpp"
#include <stdlib.h>
#include <stdio.h>

LinkedList::LinkedList()
{
    this->count = 0;
    this->head = NULL;
    this->tail = NULL;
}

Card* LinkedList::removeFront()
{
    if(this->count > 0)
    {
        Node* front = this->head;
        Card* temp = front->getPayload();
        this->head = front->getNextNode();
        this->count--;

        if(this->head)
        {
            this->head->setPrevNode(NULL);
        }

        if(this->tail == front)
        {
            this->tail = NULL;
        }

        front->setNextNode(NULL);
        front->setPrevNode(NULL);
        delete(front);
        return temp;
    }
}

Node* LinkedList::get(int index)
{
    Node* node2Return = this->head;
    for(int i = 0; i < index; i++)
    {
        node2Return = node2Return->getNextNode();
    }
    return node2Return;
}

void LinkedList::swap(int index1, int index2)
{
    Node* smallerNode = this->get(index1);
    Node* largerNode = this->get(index2);
    Card* temp = smallerNode->getPayload();
    smallerNode->setPayload(largerNode->getPayload());
    largerNode->setPayload(temp);
}
void mergeSort(int arr[], int a, int b, int c)
{
    int n1 = b - l + 1;
    int n2 = c - b;

    // Create temp arrays
    int A[n1], B[n2];

    // Copy data to temp arrays A[] and B[]
    for (int i = 0; i < n1; i++)
        A[i] = arr[a + i];
    for (int j = 0; j < n2; j++)
        B[j] = arr[b + 1 + j];

    // Initial index of first subarray
    int d = 0;

    // Initial index of second subarray
    int e = 0;

    // Initial index of merged subarray
    int f = l;

    while (d < n1 && e < n2) {
        if (A[d] <= B[e]) {
            arr[f] = L[d];
            d++;
        }
        else {
            arr[f] = B[e];
            e++;
        }
        f++;
    }

    
    while (d < n1) {
        arr[f] = A[d];
        d++;
        f++;
    }

   
    while (e < n2) {
        arr[f] = B[e];
        e++;
        f++;
    }
}


void merge(int arr[], int a, int b) {
    if (a >= b) {
        return;//returns recursively
    }
    int m = l + (b - l) / 2;
    merge(arr, a, m);
    merge(arr, m + 1, b);
    mergeSort(arr, a, m, b);
}
void list()
{
    int arr[] = { 1, 5,67,3,6,2,3,4,6,8,3,1,2,3,8,9,7,52};
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    mergeSort(arr, 0, arr_size - 1);

   
    return 0;
}

void LinkedList::insertionSortOnDefense()
{
    int theFollower;
    for(int currStart = 1; currStart < this->count; currStart++)
    {
        theFollower = currStart;
        while(theFollower > 0 && this->get(theFollower)->getPayload()->getDefense() <
                this->get(theFollower-1)->getPayload()->getDefense())
        {
            //I need to swap
            this->swap(theFollower, theFollower-1);
            theFollower--;
        }
    }
}

void LinkedList::addEnd(Card* c)
{
    Node* n = new Node(c);
    if(this->count == 0)
    {
        this->head = n;
        this->tail = n;
    }
    else
    {
        n->setPrevNode(this->tail);
        this->tail->setNextNode(n);
        this->tail = n;
    }
    this->count++;
}

int LinkedList::getCount()
{
    return this->count;
}

void LinkedList::display()
{
    Node* currNode = this->head;
    for(int i = 0; i < this->count; i++)
    {
        currNode->getPayload()->display();
        currNode = currNode->getNextNode();
    }

    this->head->getPayload()->display();
    this->tail->getPayload()->display();
}
